{"version":3,"sources":["_createSet.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,MAAM,QAAQ,QAAR,CAAV;AAAA,IACI,OAAO,QAAQ,QAAR,CADX;AAAA,IAEI,aAAa,QAAQ,eAAR,CAFjB;;AAIA;AACA,IAAI,WAAW,IAAI,CAAnB;;AAEA;;;;;;;AAOA,IAAI,YAAY,EAAE,OAAO,IAAI,WAAW,IAAI,GAAJ,CAAQ,GAAG,CAAC,CAAJ,CAAR,CAAX,EAA4B,CAA5B,CAAJ,IAAsC,QAA/C,IAA2D,IAA3D,GAAkE,UAAU,MAAV,EAAkB;AAClG,SAAO,IAAI,GAAJ,CAAQ,MAAR,CAAP;AACD,CAFD;;AAIA,OAAO,OAAP,GAAiB,SAAjB","file":"_createSet-compiled.js","sourcesContent":["'use strict';\n\nvar Set = require('./_Set'),\n    noop = require('./noop'),\n    setToArray = require('./_setToArray');\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\nvar createSet = !(Set && 1 / setToArray(new Set([, -0]))[1] == INFINITY) ? noop : function (values) {\n  return new Set(values);\n};\n\nmodule.exports = createSet;"]}