{"version":3,"sources":["_createWrap.js"],"names":[],"mappings":"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","file":"_createWrap-compiled.js","sourcesContent":["'use strict';\n\nvar baseSetData = require('./_baseSetData'),\n    createBind = require('./_createBind'),\n    createCurry = require('./_createCurry'),\n    createHybrid = require('./_createHybrid'),\n    createPartial = require('./_createPartial'),\n    getData = require('./_getData'),\n    mergeData = require('./_mergeData'),\n    setData = require('./_setData'),\n    setWrapToString = require('./_setWrapToString'),\n    toInteger = require('./toInteger');\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to compose bitmasks for function metadata. */\nvar BIND_FLAG = 1,\n    BIND_KEY_FLAG = 2,\n    CURRY_FLAG = 8,\n    CURRY_RIGHT_FLAG = 16,\n    PARTIAL_FLAG = 32,\n    PARTIAL_RIGHT_FLAG = 64;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max;\n\n/**\n * Creates a function that either curries or invokes `func` with optional\n * `this` binding and partially applied arguments.\n *\n * @private\n * @param {Function|string} func The function or method name to wrap.\n * @param {number} bitmask The bitmask flags.\n *  The bitmask may be composed of the following flags:\n *     1 - `_.bind`\n *     2 - `_.bindKey`\n *     4 - `_.curry` or `_.curryRight` of a bound function\n *     8 - `_.curry`\n *    16 - `_.curryRight`\n *    32 - `_.partial`\n *    64 - `_.partialRight`\n *   128 - `_.rearg`\n *   256 - `_.ary`\n *   512 - `_.flip`\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to be partially applied.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {\n  var isBindKey = bitmask & BIND_KEY_FLAG;\n  if (!isBindKey && typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  var length = partials ? partials.length : 0;\n  if (!length) {\n    bitmask &= ~(PARTIAL_FLAG | PARTIAL_RIGHT_FLAG);\n    partials = holders = undefined;\n  }\n  ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);\n  arity = arity === undefined ? arity : toInteger(arity);\n  length -= holders ? holders.length : 0;\n\n  if (bitmask & PARTIAL_RIGHT_FLAG) {\n    var partialsRight = partials,\n        holdersRight = holders;\n\n    partials = holders = undefined;\n  }\n  var data = isBindKey ? undefined : getData(func);\n\n  var newData = [func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity];\n\n  if (data) {\n    mergeData(newData, data);\n  }\n  func = newData[0];\n  bitmask = newData[1];\n  thisArg = newData[2];\n  partials = newData[3];\n  holders = newData[4];\n  arity = newData[9] = newData[9] == null ? isBindKey ? 0 : func.length : nativeMax(newData[9] - length, 0);\n\n  if (!arity && bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG)) {\n    bitmask &= ~(CURRY_FLAG | CURRY_RIGHT_FLAG);\n  }\n  if (!bitmask || bitmask == BIND_FLAG) {\n    var result = createBind(func, bitmask, thisArg);\n  } else if (bitmask == CURRY_FLAG || bitmask == CURRY_RIGHT_FLAG) {\n    result = createCurry(func, bitmask, arity);\n  } else if ((bitmask == PARTIAL_FLAG || bitmask == (BIND_FLAG | PARTIAL_FLAG)) && !holders.length) {\n    result = createPartial(func, bitmask, thisArg, partials);\n  } else {\n    result = createHybrid.apply(undefined, newData);\n  }\n  var setter = data ? baseSetData : setData;\n  return setWrapToString(setter(result, newData), func, bitmask);\n}\n\nmodule.exports = createWrap;"]}