{"version":3,"sources":["_createHybrid.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,cAAc,QAAQ,gBAAR,CAAlB;AAAA,IACI,mBAAmB,QAAQ,qBAAR,CADvB;AAAA,IAEI,eAAe,QAAQ,iBAAR,CAFnB;AAAA,IAGI,aAAa,QAAQ,eAAR,CAHjB;AAAA,IAII,gBAAgB,QAAQ,kBAAR,CAJpB;AAAA,IAKI,YAAY,QAAQ,cAAR,CALhB;AAAA,IAMI,UAAU,QAAQ,YAAR,CANd;AAAA,IAOI,iBAAiB,QAAQ,mBAAR,CAPrB;AAAA,IAQI,OAAO,QAAQ,SAAR,CARX;;AAUA;AACA,IAAI,YAAY,CAAhB;AAAA,IACI,gBAAgB,CADpB;AAAA,IAEI,aAAa,CAFjB;AAAA,IAGI,mBAAmB,EAHvB;AAAA,IAII,WAAW,GAJf;AAAA,IAKI,YAAY,GALhB;;AAOA;;;;;;;;;;;;;;;;;;;AAmBA,SAAS,YAAT,CAAsB,IAAtB,EAA4B,OAA5B,EAAqC,OAArC,EAA8C,QAA9C,EAAwD,OAAxD,EAAiE,aAAjE,EAAgF,YAAhF,EAA8F,MAA9F,EAAsG,GAAtG,EAA2G,KAA3G,EAAkH;AAChH,MAAI,QAAQ,UAAU,QAAtB;AAAA,MACI,SAAS,UAAU,SADvB;AAAA,MAEI,YAAY,UAAU,aAF1B;AAAA,MAGI,YAAY,WAAW,aAAa,gBAAxB,CAHhB;AAAA,MAII,SAAS,UAAU,SAJvB;AAAA,MAKI,OAAO,YAAY,SAAZ,GAAwB,WAAW,IAAX,CALnC;;AAOA,WAAS,OAAT,GAAmB;AACjB,QAAI,SAAS,UAAU,MAAvB;AAAA,QACI,OAAO,MAAM,MAAN,CADX;AAAA,QAEI,QAAQ,MAFZ;;AAIA,WAAO,OAAP,EAAgB;AACd,WAAK,KAAL,IAAc,UAAU,KAAV,CAAd;AACD;AACD,QAAI,SAAJ,EAAe;AACb,UAAI,cAAc,UAAU,OAAV,CAAlB;AAAA,UACI,eAAe,aAAa,IAAb,EAAmB,WAAnB,CADnB;AAED;AACD,QAAI,QAAJ,EAAc;AACZ,aAAO,YAAY,IAAZ,EAAkB,QAAlB,EAA4B,OAA5B,EAAqC,SAArC,CAAP;AACD;AACD,QAAI,aAAJ,EAAmB;AACjB,aAAO,iBAAiB,IAAjB,EAAuB,aAAvB,EAAsC,YAAtC,EAAoD,SAApD,CAAP;AACD;AACD,cAAU,YAAV;AACA,QAAI,aAAa,SAAS,KAA1B,EAAiC;AAC/B,UAAI,aAAa,eAAe,IAAf,EAAqB,WAArB,CAAjB;AACA,aAAO,cAAc,IAAd,EAAoB,OAApB,EAA6B,YAA7B,EAA2C,QAAQ,WAAnD,EAAgE,OAAhE,EAAyE,IAAzE,EAA+E,UAA/E,EAA2F,MAA3F,EAAmG,GAAnG,EAAwG,QAAQ,MAAhH,CAAP;AACD;AACD,QAAI,cAAc,SAAS,OAAT,GAAmB,IAArC;AAAA,QACI,KAAK,YAAY,YAAY,IAAZ,CAAZ,GAAgC,IADzC;;AAGA,aAAS,KAAK,MAAd;AACA,QAAI,MAAJ,EAAY;AACV,aAAO,QAAQ,IAAR,EAAc,MAAd,CAAP;AACD,KAFD,MAEO,IAAI,UAAU,SAAS,CAAvB,EAA0B;AAC/B,WAAK,OAAL;AACD;AACD,QAAI,SAAS,MAAM,MAAnB,EAA2B;AACzB,WAAK,MAAL,GAAc,GAAd;AACD;AACD,QAAI,QAAQ,SAAS,IAAjB,IAAyB,gBAAgB,OAA7C,EAAsD;AACpD,WAAK,QAAQ,WAAW,EAAX,CAAb;AACD;AACD,WAAO,GAAG,KAAH,CAAS,WAAT,EAAsB,IAAtB,CAAP;AACD;AACD,SAAO,OAAP;AACD;;AAED,OAAO,OAAP,GAAiB,YAAjB","file":"_createHybrid-compiled.js","sourcesContent":["'use strict';\n\nvar composeArgs = require('./_composeArgs'),\n    composeArgsRight = require('./_composeArgsRight'),\n    countHolders = require('./_countHolders'),\n    createCtor = require('./_createCtor'),\n    createRecurry = require('./_createRecurry'),\n    getHolder = require('./_getHolder'),\n    reorder = require('./_reorder'),\n    replaceHolders = require('./_replaceHolders'),\n    root = require('./_root');\n\n/** Used to compose bitmasks for function metadata. */\nvar BIND_FLAG = 1,\n    BIND_KEY_FLAG = 2,\n    CURRY_FLAG = 8,\n    CURRY_RIGHT_FLAG = 16,\n    ARY_FLAG = 128,\n    FLIP_FLAG = 512;\n\n/**\n * Creates a function that wraps `func` to invoke it with optional `this`\n * binding of `thisArg`, partial application, and currying.\n *\n * @private\n * @param {Function|string} func The function or method name to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {*} [thisArg] The `this` binding of `func`.\n * @param {Array} [partials] The arguments to prepend to those provided to\n *  the new function.\n * @param {Array} [holders] The `partials` placeholder indexes.\n * @param {Array} [partialsRight] The arguments to append to those provided\n *  to the new function.\n * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.\n * @param {Array} [argPos] The argument positions of the new function.\n * @param {number} [ary] The arity cap of `func`.\n * @param {number} [arity] The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {\n  var isAry = bitmask & ARY_FLAG,\n      isBind = bitmask & BIND_FLAG,\n      isBindKey = bitmask & BIND_KEY_FLAG,\n      isCurried = bitmask & (CURRY_FLAG | CURRY_RIGHT_FLAG),\n      isFlip = bitmask & FLIP_FLAG,\n      Ctor = isBindKey ? undefined : createCtor(func);\n\n  function wrapper() {\n    var length = arguments.length,\n        args = Array(length),\n        index = length;\n\n    while (index--) {\n      args[index] = arguments[index];\n    }\n    if (isCurried) {\n      var placeholder = getHolder(wrapper),\n          holdersCount = countHolders(args, placeholder);\n    }\n    if (partials) {\n      args = composeArgs(args, partials, holders, isCurried);\n    }\n    if (partialsRight) {\n      args = composeArgsRight(args, partialsRight, holdersRight, isCurried);\n    }\n    length -= holdersCount;\n    if (isCurried && length < arity) {\n      var newHolders = replaceHolders(args, placeholder);\n      return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, thisArg, args, newHolders, argPos, ary, arity - length);\n    }\n    var thisBinding = isBind ? thisArg : this,\n        fn = isBindKey ? thisBinding[func] : func;\n\n    length = args.length;\n    if (argPos) {\n      args = reorder(args, argPos);\n    } else if (isFlip && length > 1) {\n      args.reverse();\n    }\n    if (isAry && ary < length) {\n      args.length = ary;\n    }\n    if (this && this !== root && this instanceof wrapper) {\n      fn = Ctor || createCtor(fn);\n    }\n    return fn.apply(thisBinding, args);\n  }\n  return wrapper;\n}\n\nmodule.exports = createHybrid;"]}