{"version":3,"sources":["_baseUnset.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,WAAW,QAAQ,aAAR,CAAf;AAAA,IACI,QAAQ,QAAQ,UAAR,CADZ;AAAA,IAEI,OAAO,QAAQ,QAAR,CAFX;AAAA,IAGI,SAAS,QAAQ,WAAR,CAHb;AAAA,IAII,QAAQ,QAAQ,UAAR,CAJZ;;AAMA;AACA,IAAI,cAAc,OAAO,SAAzB;;AAEA;AACA,IAAI,iBAAiB,YAAY,cAAjC;;AAEA;;;;;;;;AAQA,SAAS,SAAT,CAAmB,MAAnB,EAA2B,IAA3B,EAAiC;AAC/B,SAAO,MAAM,IAAN,EAAY,MAAZ,IAAsB,CAAC,IAAD,CAAtB,GAA+B,SAAS,IAAT,CAAtC;AACA,WAAS,OAAO,MAAP,EAAe,IAAf,CAAT;;AAEA,MAAI,MAAM,MAAM,KAAK,IAAL,CAAN,CAAV;AACA,SAAO,EAAE,UAAU,IAAV,IAAkB,eAAe,IAAf,CAAoB,MAApB,EAA4B,GAA5B,CAApB,KAAyD,OAAO,OAAO,GAAP,CAAvE;AACD;;AAED,OAAO,OAAP,GAAiB,SAAjB","file":"_baseUnset-compiled.js","sourcesContent":["'use strict';\n\nvar castPath = require('./_castPath'),\n    isKey = require('./_isKey'),\n    last = require('./last'),\n    parent = require('./_parent'),\n    toKey = require('./_toKey');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * The base implementation of `_.unset`.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {Array|string} path The path of the property to unset.\n * @returns {boolean} Returns `true` if the property is deleted, else `false`.\n */\nfunction baseUnset(object, path) {\n  path = isKey(path, object) ? [path] : castPath(path);\n  object = parent(object, path);\n\n  var key = toKey(last(path));\n  return !(object != null && hasOwnProperty.call(object, key)) || delete object[key];\n}\n\nmodule.exports = baseUnset;"]}