{"version":3,"sources":["_createCurry.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,QAAQ,QAAQ,UAAR,CAAZ;AAAA,IACI,aAAa,QAAQ,eAAR,CADjB;AAAA,IAEI,eAAe,QAAQ,iBAAR,CAFnB;AAAA,IAGI,gBAAgB,QAAQ,kBAAR,CAHpB;AAAA,IAII,YAAY,QAAQ,cAAR,CAJhB;AAAA,IAKI,iBAAiB,QAAQ,mBAAR,CALrB;AAAA,IAMI,OAAO,QAAQ,SAAR,CANX;;AAQA;;;;;;;;;AASA,SAAS,WAAT,CAAqB,IAArB,EAA2B,OAA3B,EAAoC,KAApC,EAA2C;AACzC,MAAI,OAAO,WAAW,IAAX,CAAX;;AAEA,WAAS,OAAT,GAAmB;AACjB,QAAI,SAAS,UAAU,MAAvB;AAAA,QACI,OAAO,MAAM,MAAN,CADX;AAAA,QAEI,QAAQ,MAFZ;AAAA,QAGI,cAAc,UAAU,OAAV,CAHlB;;AAKA,WAAO,OAAP,EAAgB;AACd,WAAK,KAAL,IAAc,UAAU,KAAV,CAAd;AACD;AACD,QAAI,UAAU,SAAS,CAAT,IAAc,KAAK,CAAL,MAAY,WAA1B,IAAyC,KAAK,SAAS,CAAd,MAAqB,WAA9D,GAA4E,EAA5E,GAAiF,eAAe,IAAf,EAAqB,WAArB,CAA/F;;AAEA,cAAU,QAAQ,MAAlB;AACA,QAAI,SAAS,KAAb,EAAoB;AAClB,aAAO,cAAc,IAAd,EAAoB,OAApB,EAA6B,YAA7B,EAA2C,QAAQ,WAAnD,EAAgE,SAAhE,EAA2E,IAA3E,EAAiF,OAAjF,EAA0F,SAA1F,EAAqG,SAArG,EAAgH,QAAQ,MAAxH,CAAP;AACD;AACD,QAAI,KAAK,QAAQ,SAAS,IAAjB,IAAyB,gBAAgB,OAAzC,GAAmD,IAAnD,GAA0D,IAAnE;AACA,WAAO,MAAM,EAAN,EAAU,IAAV,EAAgB,IAAhB,CAAP;AACD;AACD,SAAO,OAAP;AACD;;AAED,OAAO,OAAP,GAAiB,WAAjB","file":"_createCurry-compiled.js","sourcesContent":["'use strict';\n\nvar apply = require('./_apply'),\n    createCtor = require('./_createCtor'),\n    createHybrid = require('./_createHybrid'),\n    createRecurry = require('./_createRecurry'),\n    getHolder = require('./_getHolder'),\n    replaceHolders = require('./_replaceHolders'),\n    root = require('./_root');\n\n/**\n * Creates a function that wraps `func` to enable currying.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\n * @param {number} arity The arity of `func`.\n * @returns {Function} Returns the new wrapped function.\n */\nfunction createCurry(func, bitmask, arity) {\n  var Ctor = createCtor(func);\n\n  function wrapper() {\n    var length = arguments.length,\n        args = Array(length),\n        index = length,\n        placeholder = getHolder(wrapper);\n\n    while (index--) {\n      args[index] = arguments[index];\n    }\n    var holders = length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder ? [] : replaceHolders(args, placeholder);\n\n    length -= holders.length;\n    if (length < arity) {\n      return createRecurry(func, bitmask, createHybrid, wrapper.placeholder, undefined, args, holders, undefined, undefined, arity - length);\n    }\n    var fn = this && this !== root && this instanceof wrapper ? Ctor : func;\n    return apply(fn, this, args);\n  }\n  return wrapper;\n}\n\nmodule.exports = createCurry;"]}