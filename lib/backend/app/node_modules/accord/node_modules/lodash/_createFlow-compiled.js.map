{"version":3,"sources":["_createFlow.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,gBAAgB,QAAQ,kBAAR,CAApB;AAAA,IACI,WAAW,QAAQ,aAAR,CADf;AAAA,IAEI,UAAU,QAAQ,YAAR,CAFd;AAAA,IAGI,cAAc,QAAQ,gBAAR,CAHlB;AAAA,IAII,UAAU,QAAQ,WAAR,CAJd;AAAA,IAKI,aAAa,QAAQ,eAAR,CALjB;;AAOA;AACA,IAAI,mBAAmB,GAAvB;;AAEA;AACA,IAAI,kBAAkB,qBAAtB;;AAEA;AACA,IAAI,aAAa,CAAjB;AAAA,IACI,eAAe,EADnB;AAAA,IAEI,WAAW,GAFf;AAAA,IAGI,aAAa,GAHjB;;AAKA;;;;;;;AAOA,SAAS,UAAT,CAAoB,SAApB,EAA+B;AAC7B,SAAO,SAAS,UAAU,KAAV,EAAiB;AAC/B,QAAI,SAAS,MAAM,MAAnB;AAAA,QACI,QAAQ,MADZ;AAAA,QAEI,SAAS,cAAc,SAAd,CAAwB,IAFrC;;AAIA,QAAI,SAAJ,EAAe;AACb,YAAM,OAAN;AACD;AACD,WAAO,OAAP,EAAgB;AACd,UAAI,OAAO,MAAM,KAAN,CAAX;AACA,UAAI,OAAO,IAAP,IAAe,UAAnB,EAA+B;AAC7B,cAAM,IAAI,SAAJ,CAAc,eAAd,CAAN;AACD;AACD,UAAI,UAAU,CAAC,OAAX,IAAsB,YAAY,IAAZ,KAAqB,SAA/C,EAA0D;AACxD,YAAI,UAAU,IAAI,aAAJ,CAAkB,EAAlB,EAAsB,IAAtB,CAAd;AACD;AACF;AACD,YAAQ,UAAU,KAAV,GAAkB,MAA1B;AACA,WAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,aAAO,MAAM,KAAN,CAAP;;AAEA,UAAI,WAAW,YAAY,IAAZ,CAAf;AAAA,UACI,OAAO,YAAY,SAAZ,GAAwB,QAAQ,IAAR,CAAxB,GAAwC,SADnD;;AAGA,UAAI,QAAQ,WAAW,KAAK,CAAL,CAAX,CAAR,IAA+B,KAAK,CAAL,MAAY,WAAW,UAAX,GAAwB,YAAxB,GAAuC,UAAnD,CAA/B,IAAiG,CAAC,KAAK,CAAL,EAAQ,MAA1G,IAAoH,KAAK,CAAL,KAAW,CAAnI,EAAsI;AACpI,kBAAU,QAAQ,YAAY,KAAK,CAAL,CAAZ,CAAR,EAA8B,KAA9B,CAAoC,OAApC,EAA6C,KAAK,CAAL,CAA7C,CAAV;AACD,OAFD,MAEO;AACL,kBAAU,KAAK,MAAL,IAAe,CAAf,IAAoB,WAAW,IAAX,CAApB,GAAuC,QAAQ,QAAR,GAAvC,GAA6D,QAAQ,IAAR,CAAa,IAAb,CAAvE;AACD;AACF;AACD,WAAO,YAAY;AACjB,UAAI,OAAO,SAAX;AAAA,UACI,QAAQ,KAAK,CAAL,CADZ;;AAGA,UAAI,WAAW,KAAK,MAAL,IAAe,CAA1B,IAA+B,QAAQ,KAAR,CAA/B,IAAiD,MAAM,MAAN,IAAgB,gBAArE,EAAuF;AACrF,eAAO,QAAQ,KAAR,CAAc,KAAd,EAAqB,KAArB,EAAP;AACD;AACD,UAAI,QAAQ,CAAZ;AAAA,UACI,SAAS,SAAS,MAAM,KAAN,EAAa,KAAb,CAAmB,IAAnB,EAAyB,IAAzB,CAAT,GAA0C,KADvD;;AAGA,aAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACvB,iBAAS,MAAM,KAAN,EAAa,IAAb,CAAkB,IAAlB,EAAwB,MAAxB,CAAT;AACD;AACD,aAAO,MAAP;AACD,KAdD;AAeD,GA7CM,CAAP;AA8CD;;AAED,OAAO,OAAP,GAAiB,UAAjB","file":"_createFlow-compiled.js","sourcesContent":["'use strict';\n\nvar LodashWrapper = require('./_LodashWrapper'),\n    flatRest = require('./_flatRest'),\n    getData = require('./_getData'),\n    getFuncName = require('./_getFuncName'),\n    isArray = require('./isArray'),\n    isLaziable = require('./_isLaziable');\n\n/** Used as the size to enable large array optimizations. */\nvar LARGE_ARRAY_SIZE = 200;\n\n/** Error message constants. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used to compose bitmasks for function metadata. */\nvar CURRY_FLAG = 8,\n    PARTIAL_FLAG = 32,\n    ARY_FLAG = 128,\n    REARG_FLAG = 256;\n\n/**\n * Creates a `_.flow` or `_.flowRight` function.\n *\n * @private\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {Function} Returns the new flow function.\n */\nfunction createFlow(fromRight) {\n  return flatRest(function (funcs) {\n    var length = funcs.length,\n        index = length,\n        prereq = LodashWrapper.prototype.thru;\n\n    if (fromRight) {\n      funcs.reverse();\n    }\n    while (index--) {\n      var func = funcs[index];\n      if (typeof func != 'function') {\n        throw new TypeError(FUNC_ERROR_TEXT);\n      }\n      if (prereq && !wrapper && getFuncName(func) == 'wrapper') {\n        var wrapper = new LodashWrapper([], true);\n      }\n    }\n    index = wrapper ? index : length;\n    while (++index < length) {\n      func = funcs[index];\n\n      var funcName = getFuncName(func),\n          data = funcName == 'wrapper' ? getData(func) : undefined;\n\n      if (data && isLaziable(data[0]) && data[1] == (ARY_FLAG | CURRY_FLAG | PARTIAL_FLAG | REARG_FLAG) && !data[4].length && data[9] == 1) {\n        wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);\n      } else {\n        wrapper = func.length == 1 && isLaziable(func) ? wrapper[funcName]() : wrapper.thru(func);\n      }\n    }\n    return function () {\n      var args = arguments,\n          value = args[0];\n\n      if (wrapper && args.length == 1 && isArray(value) && value.length >= LARGE_ARRAY_SIZE) {\n        return wrapper.plant(value).value();\n      }\n      var index = 0,\n          result = length ? funcs[index].apply(this, args) : value;\n\n      while (++index < length) {\n        result = funcs[index].call(this, result);\n      }\n      return result;\n    };\n  });\n}\n\nmodule.exports = createFlow;"]}