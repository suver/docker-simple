{"version":3,"sources":["_baseXor.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,YAAY,QAAQ,cAAR,CAAhB;AAAA,IACI,iBAAiB,QAAQ,mBAAR,CADrB;AAAA,IAEI,WAAW,QAAQ,aAAR,CAFf;;AAIA;;;;;;;;;;AAUA,SAAS,OAAT,CAAiB,MAAjB,EAAyB,QAAzB,EAAmC,UAAnC,EAA+C;AAC3C,QAAI,QAAQ,CAAC,CAAb;AAAA,QACI,SAAS,OAAO,MADpB;;AAGA,WAAO,EAAE,KAAF,GAAU,MAAjB,EAAyB;AACrB,YAAI,SAAS,SAAS,UAAU,eAAe,MAAf,EAAuB,OAAO,KAAP,CAAvB,EAAsC,QAAtC,EAAgD,UAAhD,CAAV,EAAuE,eAAe,OAAO,KAAP,CAAf,EAA8B,MAA9B,EAAsC,QAAtC,EAAgD,UAAhD,CAAvE,CAAT,GAA+I,OAAO,KAAP,CAA5J;AACH;AACD,WAAO,UAAU,OAAO,MAAjB,GAA0B,SAAS,MAAT,EAAiB,QAAjB,EAA2B,UAA3B,CAA1B,GAAmE,EAA1E;AACH;;AAED,OAAO,OAAP,GAAiB,OAAjB","file":"_baseXor-compiled.js","sourcesContent":["'use strict';\n\nvar arrayPush = require('./_arrayPush'),\n    baseDifference = require('./_baseDifference'),\n    baseUniq = require('./_baseUniq');\n\n/**\n * The base implementation of methods like `_.xor`, without support for\n * iteratee shorthands, that accepts an array of arrays to inspect.\n *\n * @private\n * @param {Array} arrays The arrays to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of values.\n */\nfunction baseXor(arrays, iteratee, comparator) {\n    var index = -1,\n        length = arrays.length;\n\n    while (++index < length) {\n        var result = result ? arrayPush(baseDifference(result, arrays[index], iteratee, comparator), baseDifference(arrays[index], result, iteratee, comparator)) : arrays[index];\n    }\n    return result && result.length ? baseUniq(result, iteratee, comparator) : [];\n}\n\nmodule.exports = baseXor;"]}