{"version":3,"sources":["_baseMergeDeep.js"],"names":[],"mappings":"AAAA;;AAEA,IAAI,mBAAmB,QAAQ,qBAAR,CAAvB;AAAA,IACI,cAAc,QAAQ,gBAAR,CADlB;AAAA,IAEI,kBAAkB,QAAQ,oBAAR,CAFtB;AAAA,IAGI,YAAY,QAAQ,cAAR,CAHhB;AAAA,IAII,kBAAkB,QAAQ,oBAAR,CAJtB;AAAA,IAKI,cAAc,QAAQ,eAAR,CALlB;AAAA,IAMI,UAAU,QAAQ,WAAR,CANd;AAAA,IAOI,oBAAoB,QAAQ,qBAAR,CAPxB;AAAA,IAQI,WAAW,QAAQ,YAAR,CARf;AAAA,IASI,aAAa,QAAQ,cAAR,CATjB;AAAA,IAUI,WAAW,QAAQ,YAAR,CAVf;AAAA,IAWI,gBAAgB,QAAQ,iBAAR,CAXpB;AAAA,IAYI,eAAe,QAAQ,gBAAR,CAZnB;AAAA,IAaI,gBAAgB,QAAQ,iBAAR,CAbpB;;AAeA;;;;;;;;;;;;;;;AAeA,SAAS,aAAT,CAAuB,MAAvB,EAA+B,MAA/B,EAAuC,GAAvC,EAA4C,QAA5C,EAAsD,SAAtD,EAAiE,UAAjE,EAA6E,KAA7E,EAAoF;AAClF,MAAI,WAAW,OAAO,GAAP,CAAf;AAAA,MACI,WAAW,OAAO,GAAP,CADf;AAAA,MAEI,UAAU,MAAM,GAAN,CAAU,QAAV,CAFd;;AAIA,MAAI,OAAJ,EAAa;AACX,qBAAiB,MAAjB,EAAyB,GAAzB,EAA8B,OAA9B;AACA;AACD;AACD,MAAI,WAAW,aAAa,WAAW,QAAX,EAAqB,QAArB,EAA+B,MAAM,EAArC,EAAyC,MAAzC,EAAiD,MAAjD,EAAyD,KAAzD,CAAb,GAA+E,SAA9F;;AAEA,MAAI,WAAW,aAAa,SAA5B;;AAEA,MAAI,QAAJ,EAAc;AACZ,QAAI,QAAQ,QAAQ,QAAR,CAAZ;AAAA,QACI,SAAS,CAAC,KAAD,IAAU,SAAS,QAAT,CADvB;AAAA,QAEI,UAAU,CAAC,KAAD,IAAU,CAAC,MAAX,IAAqB,aAAa,QAAb,CAFnC;;AAIA,eAAW,QAAX;AACA,QAAI,SAAS,MAAT,IAAmB,OAAvB,EAAgC;AAC9B,UAAI,QAAQ,QAAR,CAAJ,EAAuB;AACrB,mBAAW,QAAX;AACD,OAFD,MAEO,IAAI,kBAAkB,QAAlB,CAAJ,EAAiC;AACtC,mBAAW,UAAU,QAAV,CAAX;AACD,OAFM,MAEA,IAAI,MAAJ,EAAY;AACjB,mBAAW,KAAX;AACA,mBAAW,YAAY,QAAZ,EAAsB,IAAtB,CAAX;AACD,OAHM,MAGA,IAAI,OAAJ,EAAa;AAClB,mBAAW,KAAX;AACA,mBAAW,gBAAgB,QAAhB,EAA0B,IAA1B,CAAX;AACD,OAHM,MAGA;AACL,mBAAW,EAAX;AACD;AACF,KAdD,MAcO,IAAI,cAAc,QAAd,KAA2B,YAAY,QAAZ,CAA/B,EAAsD;AAC3D,iBAAW,QAAX;AACA,UAAI,YAAY,QAAZ,CAAJ,EAA2B;AACzB,mBAAW,cAAc,QAAd,CAAX;AACD,OAFD,MAEO,IAAI,CAAC,SAAS,QAAT,CAAD,IAAuB,YAAY,WAAW,QAAX,CAAvC,EAA6D;AAClE,mBAAW,gBAAgB,QAAhB,CAAX;AACD;AACF,KAPM,MAOA;AACL,iBAAW,KAAX;AACD;AACF;AACD,MAAI,QAAJ,EAAc;AACZ;AACA,UAAM,GAAN,CAAU,QAAV,EAAoB,QAApB;AACA,cAAU,QAAV,EAAoB,QAApB,EAA8B,QAA9B,EAAwC,UAAxC,EAAoD,KAApD;AACA,UAAM,QAAN,EAAgB,QAAhB;AACD;AACD,mBAAiB,MAAjB,EAAyB,GAAzB,EAA8B,QAA9B;AACD;;AAED,OAAO,OAAP,GAAiB,aAAjB","file":"_baseMergeDeep-compiled.js","sourcesContent":["'use strict';\n\nvar assignMergeValue = require('./_assignMergeValue'),\n    cloneBuffer = require('./_cloneBuffer'),\n    cloneTypedArray = require('./_cloneTypedArray'),\n    copyArray = require('./_copyArray'),\n    initCloneObject = require('./_initCloneObject'),\n    isArguments = require('./isArguments'),\n    isArray = require('./isArray'),\n    isArrayLikeObject = require('./isArrayLikeObject'),\n    isBuffer = require('./isBuffer'),\n    isFunction = require('./isFunction'),\n    isObject = require('./isObject'),\n    isPlainObject = require('./isPlainObject'),\n    isTypedArray = require('./isTypedArray'),\n    toPlainObject = require('./toPlainObject');\n\n/**\n * A specialized version of `baseMerge` for arrays and objects which performs\n * deep merges and tracks traversed objects enabling objects with circular\n * references to be merged.\n *\n * @private\n * @param {Object} object The destination object.\n * @param {Object} source The source object.\n * @param {string} key The key of the value to merge.\n * @param {number} srcIndex The index of `source`.\n * @param {Function} mergeFunc The function to merge values.\n * @param {Function} [customizer] The function to customize assigned values.\n * @param {Object} [stack] Tracks traversed source values and their merged\n *  counterparts.\n */\nfunction baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n  var objValue = object[key],\n      srcValue = source[key],\n      stacked = stack.get(srcValue);\n\n  if (stacked) {\n    assignMergeValue(object, key, stacked);\n    return;\n  }\n  var newValue = customizer ? customizer(objValue, srcValue, key + '', object, source, stack) : undefined;\n\n  var isCommon = newValue === undefined;\n\n  if (isCommon) {\n    var isArr = isArray(srcValue),\n        isBuff = !isArr && isBuffer(srcValue),\n        isTyped = !isArr && !isBuff && isTypedArray(srcValue);\n\n    newValue = srcValue;\n    if (isArr || isBuff || isTyped) {\n      if (isArray(objValue)) {\n        newValue = objValue;\n      } else if (isArrayLikeObject(objValue)) {\n        newValue = copyArray(objValue);\n      } else if (isBuff) {\n        isCommon = false;\n        newValue = cloneBuffer(srcValue, true);\n      } else if (isTyped) {\n        isCommon = false;\n        newValue = cloneTypedArray(srcValue, true);\n      } else {\n        newValue = [];\n      }\n    } else if (isPlainObject(srcValue) || isArguments(srcValue)) {\n      newValue = objValue;\n      if (isArguments(objValue)) {\n        newValue = toPlainObject(objValue);\n      } else if (!isObject(objValue) || srcIndex && isFunction(objValue)) {\n        newValue = initCloneObject(srcValue);\n      }\n    } else {\n      isCommon = false;\n    }\n  }\n  if (isCommon) {\n    // Recursively merge objects and arrays (susceptible to call stack limits).\n    stack.set(srcValue, newValue);\n    mergeFunc(newValue, srcValue, srcIndex, customizer, stack);\n    stack['delete'](srcValue);\n  }\n  assignMergeValue(object, key, newValue);\n}\n\nmodule.exports = baseMergeDeep;"]}